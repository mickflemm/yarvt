#!/bin/bash

# Yet Another RISC-V tool
# Nick Kossifidis (C) <mick@ics.forth.gr>
# SPDX-License-Identifier: Apache-2.0

SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SCRIPT=$(readlink -f ${BASH_SOURCE[0]})
SCRIPT_NAME=$(basename ${SCRIPT})
BINDIR=${SCRIPT_PATH}/build
SOURCES=${SCRIPT_PATH}/sources
TMP_DIR=/tmp/${SCRIPT_NAME}_$$
NUM_JOBS=$(nproc)
: ${DEBUG:=1}
: ${CLEAR_SOURCES:=0}
if [[ ${DEBUG} == 1 ]]; then
	KEEP_LOGS=1
else
	KEEP_LOGS=0
fi
BASE_ISA=RV64I
OSBI_WITH_PAYLOAD=0
OSBI_PLATFORM=""
WORKDIR=${BINDIR}
TARGET=""
TARGET_PATH=""
INITRAMFS_SKIP_IMAGE=0
NO_NETWORK=0
KERNEL_EMBED_INITRAMFS=0
GIT_CLONE_RECURSIVE=1
MEM_START=0x0
FDT_ADDR=0x0

####################
# GIT REPOSITORIES #
####################
LINUX_KERNEL_GITPATH=pub/scm/linux/kernel/git/riscv/linux.git
LINUX_KERNEL_GITURL=https://git.kernel.org/${LINUX_KERNEL_GITPATH}
LINUX_KERNEL_GITBRANCH="fixes"

OSBI_GITURL=https://github.com/riscv/opensbi.git
OSBI_GITBRANCH=""

QEMU_GITURL=https://gitlab.com/qemu-project/qemu.git
QEMU_GITBRANCH="v7.0.0"

BBOX_GITURL=https://git.busybox.net/busybox.git
BBOX_GITBRANCH="1_35_stable"

RVGTOOLCHAIN_GITURL=https://github.com/riscv-collab/riscv-gnu-toolchain.git
RVGTOOLCHAIN_GITBRANCH="master"
RVGTOOLCHAIN_GITCOMMIT="c39061968972ac2e4a10844aa54b90c8fb94125e"

##################
# CONSOLE OUTPUT #
##################

function pr_ann () {
	echo -e "\e[32m \n--=== ${1} ===--\e[0m"
}

function pr_inf () {
	echo -e "\e[36m${1}\e[0m"
}

function pr_dbg () {
	if [[ $DEBUG ]]; then
		echo -e "\e[35m\t${1}\e[0m"
	fi
}

function pr_wrn () {
	echo -e "\e[33m\t${1}\e[0m"
}

function pr_err () {
	echo -e "\e[31m${1}\e[0m"
	KEEP_LOGS=1
}


###########
# HELPERS #
###########

function git_cleanup () {
	git checkout -f ${1} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\Git checkout failed, check out ${LOGFILE}"
		return -1;
	fi

	# Clean up untracked files
	for i in $(git status -u -s | awk '{print $2}'); do
		rm -f ${i} &>> ${LOGFILE}
	done
}

function git_update() {
	pr_dbg "Updating ${SOURCES_DIR}..."
	cd ${SOURCES_DIR}

	git_cleanup ${1}

	git pull &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\Git pull failed, check out ${LOGFILE}"
		return -1;
	fi
	git submodule sync &>> ${LOGFILE}
	git submodule update -j ${NUM_JOBS} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\Git submodules update failed, check out ${LOGFILE}"
		return -1;
	fi
}

function git_clone() {
	local BRANCH=""
	local RECURSIVE_CLONE=""
	local NON_RECURSIVE_FETCH=""
	local SAVED_PWD=${PWD}
	pr_dbg "Cloning ${GITURL} to ${SOURCES_DIR}..."
	if [[ ${1} != "" ]]; then
		BRANCH="-b ${1}"
		pr_dbg "Using branch ${1}..."
	fi
	if [[ ${GIT_CLONE_RECURSIVE} == 1 ]]; then
		RECURSIVE_CLONE="--recursive"
		pr_dbg "Recursive clone"
	elif [[ ${GIT_CLONE_RECURSIVE} == 0 ]]; then
		NON_RECURSIVE_FETCH="--no-recurse-submodules"
	fi

	git clone ${RECURSIVE} ${BRANCH} --depth=1 ${GITURL} \
		-j ${NUM_JOBS} ${SOURCES_DIR} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tGit clone failed, check out ${LOGFILE}"
		return -1;
	fi

	# Switch to a specific commit and create a snapshot branch
	if [[ ${2} != "" ]]; then
		cd ${SOURCES_DIR}
		git fetch -j ${NUM_JOBS} origin ${NON_RECURSIVE_FETCH} ${2} &>> ${LOGFILE}
		git checkout -b snapshot -f ${2} &>> ${LOGFILE}
		pr_dbg "Switching to commit ${2}"
		cd ${SAVED_PWD}
	fi
}

function get_git_sources() {
	local SAVED_PWD=${PWD}
	if [[ -d ${SOURCES_DIR} ]]; then
		if [[ ${CLEAR_SOURCES} == 1 ]]; then
			pr_dbg "Cleaning up ${SOURCES_DIR}..."
			rm -rf ${SOURCES_DIR} &>> ${LOGFILE}
			git_clone ${1} ${2}
		else
			if [[ ${2} != "" ]]; then
				cd ${SOURCES_DIR}
				git_cleanup snapshot
				cd ${SAVED_PWD}
			else
				git_update ${1}
			fi
		fi
	else
		git_clone ${1} ${2}
	fi
}

function get_git_submodule () {
	local SAVED_PWD=${PWD}
	local RECURSIVE=""
	local SHALLOW="--recommend-shallow"
	local SUBMODULE_NAME=""
	if [[ ${GIT_CLONE_RECURSIVE} == 1 ]]; then
		RECURSIVE="--recursive"
		pr_dbg "Recursive checkout"
	fi
	cd ${SOURCES_DIR}
	if [[ -e ${1}/.git ]]; then
		if [[ ${CLEAR_SOURCES} == 1 ]]; then
			pr_dbg "Cleaning up ${1}..."
			rm -rf ${1} &>> ${LOGFILE}
		else
			SHALLOW=""
			cd ${1}
			git_cleanup
			cd ${SOURCES_DIR}
		fi
	fi
	SUBMODULE_NAME=$(git submodule | grep ${1} | awk '{print $2}')
	pr_dbg "Checking out submodule ${SUBMODULE_NAME}"
	git submodule update --init ${RECURSIVE} ${SHALLOW} \
			${SUBMODULE_NAME} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tSubmodule update failed, check out ${LOGFILE}"
		cd ${SAVED_PWD}
		return -1;
	fi
	cd ${SAVED_PWD}
	return 0;
}

function apply_patches () {
        local IFS=$'\n'
        local PATCHLOGFILE=${TMP_DIR}/patch.log
        local PATCHLIST=$(ls ${TARGET_PATH}/patches/${1}*.patch 2> /dev/null)

        for i in ${PATCHLIST}; do
                pr_dbg "Applying ${i}..."
                patch -p0 < ${i} &>> ${PATCHLOGFILE}
                if [[ $? != 0 ]]; then
                        pr_err "Patching failed, check out ${PATCHLOGFILE}"
                        exit -3
                fi
        done

	PATCHLIST=$(ls ${TARGET_PATH}/patches/${1}*.sh 2> /dev/null)
        for i in ${PATCHLIST}; do
                pr_dbg "Applying ${i}..."
                source ${i} &>> ${PATCHLOGFILE}
                if [[ $? != 0 ]]; then
                        pr_err "Patching failed, check out ${PATCHLOGFILE}"
                        exit -3
                fi
        done

	rm ${PATCHLOGFILE} &> /dev/null
}

function list_targets () {
	pr_inf "\nAvailable targets:"
	for i in $(ls ${SCRIPT_PATH}/targets | grep -v common); do
		pr_inf "\t${i}"
	done
}

function usage () {
	pr_inf "Usage:"
	pr_inf "\t${0} <command> <arg>"
	pr_inf "\t${0} <target> help"
	pr_inf "\t${0} <target> bootstrap"
	pr_inf "\t${0} <target> <command> <arg>"
	pr_inf "\nCommands:"
	pr_inf "\thelp/usage: Print this message"
	pr_inf "\tcleanup: Clean up environment"
	pr_inf "\tbootstrap: (Re)Build toolchains and qemu"
	pr_inf "\tbuild_toolchain: (Re)Build a specific toolchain"
	pr_wrn "\t<arg>: Toolchain type (newlib, glibc, musl32, musl64)"
	pr_inf "\tbuild_qemu: (Re)Build RISC-V QEMU"
	list_targets
	pr_inf "\nUseful variables:"
	pr_inf "\tCLEAR_SOURCES: Set to 1 to re-fetch sources from git"
	pr_inf "\tDEBUG: Enable/disable debug messages (default 1)"
	echo -e "\n"
	KEEP_LOGS=0
}

function env_check() {

	if [[ $# < 1 || $# > 3 ]]; then
		usage
		exit -1;
	fi

	if [[ ${1} == "usage" || ${1} == "help" ]]; then
		usage
		exit 0;
	fi

	# Command filter
	if [[ "${1}" != "build_toolchain" && "${1}" != "build_qemu" && \
	      "${1}" != "bootstrap" && "${1}" != "cleanup" ]]; then

		# Check if we got a command for a specific target
		if [[ -d ${SCRIPT_PATH}/targets/${1} ]]; then
			TARGET_PATH=${SCRIPT_PATH}/targets/${1}
			source ${TARGET_PATH}/commands.sh
			target_env_check $@
			target_env_prepare $@
			WORKDIR=${BINDIR}/${TARGET}
		else
			pr_err "Invalid command"
			usage
			exit -1;
		fi
	fi

	if [[ ${BASE_ISA} != "RV32I" && ${BASE_ISA} != "RV64I" ]]; then
		pr_err "Invalid BASE_ISA parameter"
		exit -1;
	fi
}


##################
# ROOTFS HELPERS #
##################

function build_busybox () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/bb.log
	local SOURCES_DIR=${SOURCES}/busybox
	local GITURL=${BBOX_GITURL}
	local INSTALL_DIR=${WORKDIR}/${BASE_ISA}/rootfs
	local BASE_ISA_XLEN=$(echo ${BASE_ISA} | tr -d [:alpha:])
	local TC_INSTALL_DIR=${BINDIR}/riscv-musl${BASE_ISA_XLEN}-toolchain
	local TARGET_TUPLE=riscv${BASE_ISA_XLEN}-unknown-linux-musl-
	local EXTRA_CFLAGS=""
	local MARCH=rv${BASE_ISA_XLEN}imafdc
	local MABI=""

	if [[ ${BASE_ISA_XLEN} == 64 ]]; then
		MABI=lp64d
	else
		MABI=ilp32d
		# Musl doesn't support 32bit support for now
		# fallback to using glibc-based toolchain (will result larger binaries)
		TARGET_TUPLE=riscv64-unknown-linux-gnu-
		TC_INSTALL_DIR=${BINDIR}/riscv-glibc-toolchain
	fi

	PATH=${TC_INSTALL_DIR}/bin:${PATH}
	EXTRA_CFLAGS="-Os -march=${MARCH} -mabi=${MABI} -mcmodel=medany -flto=$(nproc) -ffat-lto-objects"

	if [[ ! -d ${TC_INSTALL_DIR} ]]; then
		pr_err "Toolchain not present, did you run bootstrap ?"
		return -1;
	fi

	pr_inf "Checking out BusyBox sources..."
	get_git_sources ${BBOX_GITBRANCH}
	if [[ $? != 0 ]]; then
		return $?;
	fi

	pr_inf "Configuring BusyBox..."
	cd ${SOURCES_DIR}
	make clean &>> ${LOGFILE}
	make distclean &>> ${LOGFILE}
	cat ${SCRIPT_PATH}/files/busybox | \
	    sed s#"INSTALL_DIR"#${INSTALL_DIR}#g | \
	    sed s#"TARGET_TUPLE"#${TARGET_TUPLE}#g | \
	    sed s#"CONFIG_EXTRA_CFLAGS=\"\""#"CONFIG_EXTRA_CFLAGS=\"${EXTRA_CFLAGS}\""#g > .config
	# Busybox's Makefile doesn't pass CFLAGS on its LD command,
	# needed when using a multilib toolchain, else march/mabi are not preserved
	sed -i "s#-nostdlib#-nostdlib ${EXTRA_CFLAGS}#" Makefile

	pr_inf "Building BusyBox..."
	make ARCH=riscv olddefconfig &>> ${LOGFILE}
	make ARCH=riscv -j${NUM_JOBS} &>> ${LOGFILE}
	make install &>> ${LOGFILE}
	if [[ ! -f ${INSTALL_DIR}/bin/busybox ]]; then
		pr_err "\tBuild failed, check out ${LOGFILE}"
		return -1;
	fi

	cd ${SAVED_PWD}
}

function build_dropbear () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/dbear.log
	local SOURCES_DIR=${SOURCES}/dropbear
	local GITURL=https://github.com/mkj/dropbear.git
	local INSTALL_DIR=${WORKDIR}/${BASE_ISA}/rootfs
	local BASE_ISA_XLEN=$(echo ${BASE_ISA} | tr -d [:alpha:])
	local TC_INSTALL_DIR=${BINDIR}/riscv-musl${BASE_ISA_XLEN}-toolchain
	local TARGET_TUPLE=riscv${BASE_ISA_XLEN}-unknown-linux-musl
	local EXTRA_CFLAGS=""
	local MARCH=rv${BASE_ISA_XLEN}imafdc
	local MABI=""

	if [[ ${BASE_ISA_XLEN} == 64 ]]; then
		MABI=lp64d
	else
		MABI=ilp32d
		# Musl doesn't support 32bit support for now
		# fallback to using glibc-based toolchain (will result larger binaries)
		TARGET_TUPLE=riscv64-unknown-linux-gnu
		TC_INSTALL_DIR=${BINDIR}/riscv-glibc-toolchain
	fi

	PATH=${TC_INSTALL_DIR}/bin:${PATH}
	EXTRA_CFLAGS="-Os -march=${MARCH} -mabi=${MABI} -mcmodel=medany -flto=$(nproc) -ffat-lto-objects"

	if [[ ! -d ${TC_INSTALL_DIR} ]]; then
		pr_err "Toolchain not present, did you run bootstrap ?"
		return -1;
	fi

	pr_inf "Checking out Dropbear sources..."
	get_git_sources
	if [[ $? != 0 ]]; then
		return $?;
	fi

	pr_inf "Configuring Dropbear..."
	cd ${SOURCES_DIR}
	make clean &>> ${LOGFILE}
	make distclean &>> ${LOGFILE}
	autoreconf -ivf &>> ${LOGFILE}
	# Dropbear's LDFLAGS are actualy CFLAGS (it uses gcc to link)
	CFLAGS="${EXTRA_CFLAGS} -ffunction-sections -fdata-sections" \
	LDFLAGS="${EXTRA_CFLAGS} -Wl,--gc-sections" \
	./configure --enable-static --disable-zlib --disable-wtmp \
		    --disable-wtmpx --disable-lastlog --disable-harden \
		    --prefix=${INSTALL_DIR} \
		    --host=${TARGET_TUPLE} &>> ${LOGFILE}

	pr_inf "Building Dropbear..."
	make -j${NUM_JOBS} PROGRAMS="dropbear dbclient scp" MULTI=1 \
							 &>> ${LOGFILE}
	if [[ ! -f ${SOURCES_DIR}/dropbearmulti ]]; then
		pr_err "\tBuild failed, check out ${LOGFILE}"
		return -1;
	fi
	cp ${SOURCES_DIR}/dropbearmulti ${INSTALL_DIR}/bin/
	cd ${INSTALL_DIR}/bin
	${TARGET_TUPLE}-strip -s dropbearmulti
	ln -s dropbearmulti dropbear
	ln -s dropbearmulti ssh
	ln -s dropbearmulti scp

	cd ${SAVED_PWD}
}

function build_iperf () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/iperf.log
	local SOURCES_DIR=${SOURCES}/iperf
	local GITURL=https://github.com/esnet/iperf.git
	local INSTALL_DIR=${WORKDIR}/${BASE_ISA}/rootfs
	local BASE_ISA_XLEN=$(echo ${BASE_ISA} | tr -d [:alpha:])
	local TC_INSTALL_DIR=${BINDIR}/riscv-musl${BASE_ISA_XLEN}-toolchain
	local TARGET_TUPLE=riscv${BASE_ISA_XLEN}-unknown-linux-musl
	local EXTRA_CFLAGS=""
	local MARCH=rv${BASE_ISA_XLEN}imafdc
	local MABI=""

	if [[ ${BASE_ISA_XLEN} == 64 ]]; then
		MABI=lp64d
	else
		MABI=ilp32d
		# Musl doesn't support 32bit support for now
		# fallback to using glibc-based toolchain (will result larger binaries)
		TARGET_TUPLE=riscv64-unknown-linux-gnu
		TC_INSTALL_DIR=${BINDIR}/riscv-glibc-toolchain
	fi

	PATH=${TC_INSTALL_DIR}/bin:${PATH}
	EXTRA_CFLAGS="-Os -march=${MARCH} -mabi=${MABI} -mcmodel=medany -flto=$(nproc) -ffat-lto-objects"

	if [[ ! -d ${TC_INSTALL_DIR} ]]; then
		pr_err "Toolchain not present, did you run bootstrap ?"
		return -1;
	fi

	pr_inf "Checking out iperf3 sources..."
	get_git_sources
	if [[ $? != 0 ]]; then
		return $?;
	fi

	pr_inf "Configuring iperf3..."
	cd ${SOURCES_DIR}
	make clean &>> ${LOGFILE}
	make distclean &>> ${LOGFILE}
	autoreconf -ivf &>> ${LOGFILE}
	CFLAGS="${EXTRA_CFLAGS} -ffunction-sections -fdata-sections" \
	LDFLAGS="${EXTRA_CFLAGS} -Wl,--gc-sections" \
	./configure --enable-static-bin --without-sctp --with-openssl=no \
		    --prefix=${INSTALL_DIR} \
		    --host=${TARGET_TUPLE} &>> ${LOGFILE}

	pr_inf "Building iperf3..."
	make -j${NUM_JOBS} &>> ${LOGFILE}
	if [[ ! -f ${SOURCES_DIR}/src/iperf3 ]]; then
		pr_err "\tBuild failed, check out ${LOGFILE}"
		return -1;
	fi
	cp ${SOURCES_DIR}/src/iperf3 ${INSTALL_DIR}/bin/
	cd ${INSTALL_DIR}/bin
	${TARGET_TUPLE}-strip -s iperf3

	cd ${SAVED_PWD}
}


######################
# BOOTSTRAP COMMANDS #
######################

function build_toolchain () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/toolchain.log
	local SOURCES_DIR=${SOURCES}/riscv-toolchains
	local GITURL=${RVGTOOLCHAIN_GITURL}
	local TC_TYPE="${1}"
	local INSTALL_DIR=${BINDIR}/riscv-${TC_TYPE}-toolchain
	local BASE_ISA_XLEN=64
	local TC_MKTARGET=""
	local TC_OPTS=""
	local MARCH=""
	local MABI=""
	local MUSL_BRANCH=""
	local SAVED_CLEAR_SOURCES=${CLEAR_SOURCES}

	if [[ ${TC_TYPE} != "newlib" && ${TC_TYPE} != "glibc" &&
	      ${TC_TYPE} != "musl32" && ${TC_TYPE} != "musl64" ]]; then
		pr_err "Invalid toolchain type selected, aborting..."
		return -1;
	fi

	if [[ ${TC_TYPE} == "musl32" ]]; then
		BASE_ISA_XLEN=32
	fi

	pr_ann "RISC-V ${TC_TYPE} toolchain"

	pr_inf "Checking out toolchain sources..."
	GIT_CLONE_RECURSIVE=0
	get_git_sources ${RVGTOOLCHAIN_GITBRANCH} ${RVGTOOLCHAIN_GITCOMMIT}
	if [[ $? != 0 ]]; then
		return $?;
	fi

	get_git_submodule binutils
	if [[ $? != 0 ]]; then
		return $?;
	fi

	get_git_submodule gcc
	if [[ $? != 0 ]]; then
		return $?;
	fi

	get_git_submodule gdb
	if [[ $? != 0 ]]; then
		return $?;
	fi


	if [[ ${TC_TYPE} == "glibc" ]]; then
		get_git_submodule glibc
		if [[ $? != 0 ]]; then
			return $?;
		fi
	fi

	if [[ ${TC_TYPE} == "newlib" ]]; then
		get_git_submodule newlib
		if [[ $? != 0 ]]; then
			return $?;
		fi
	fi

	if [[ ${TC_TYPE} == "musl64" || ${TC_TYPE} == "musl32" ]]; then
		get_git_submodule musl
		if [[ $? != 0 ]]; then
			return $?;
		fi
	fi
	GIT_CLONE_RECURSIVE=1

	# Use medany code model by default
	TC_OPTS="--with-cmodel=medany"

	# Musl doesn't support multilib
	if [[ ${TC_TYPE} == "newlib" || ${TC_TYPE} == "glibc" ]]; then
		TC_OPTS="${TC_OPTS} --enable-multilib"
	else
		if [[ ${BASE_ISA_XLEN} == 64 ]]; then
			MABI=lp64d
		else
			MABI=ilp32d
		fi

		MARCH=rv${BASE_ISA_XLEN}imafdc
		TC_OPTS="${TC_OPTS} --with-arch=${MARCH} --with-abi=${MABI}"
	fi

	if [[ ${TC_TYPE} == "glibc" ]]; then
		TC_MKTARGET="linux"
	elif [[ ${TC_TYPE} == "musl32" || ${TC_TYPE} == "musl64" ]]; then
		TC_MKTARGET="musl"
	else
		TC_MKTARGET=${TC_TYPE}
	fi

	pr_inf "Configuring toolchain sources for ${TC_TYPE}..."
	cd ${SOURCES_DIR}
	make clean &>> ${LOGFILE}
	make distclean &>> ${LOGFILE}
	autoreconf -ivf &>> ${LOGFILE}
	./configure --prefix=${INSTALL_DIR} ${TC_OPTS} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tConfig failed, check out ${LOGFILE}..."
		return -1;
	fi

	rm -rf ${INSTALL_DIR} &>> ${LOGFILE}

	pr_inf "Building ${TC_TYPE}-based toolchain..."
	make -j${NUM_JOBS} ${TC_MKTARGET} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tBuild failed, check out ${LOGFILE}..."
		return -1;
	fi

	cd ${SAVED_PWD}
}

function build_qemu () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/qemu.log
	local SOURCES_DIR=${SOURCES}/riscv-qemu
	local GITURL=${QEMU_GITURL}
	local INSTALL_DIR=${BINDIR}/riscv-qemu
	local TARGET_LIST_SYSTEM="riscv64-softmmu,riscv32-softmmu"
	local TARGET_LIST_USER="riscv64-linux-user,riscv32-linux-user"
	local TARGET_LIST=${TARGET_LIST_SYSTEM},${TARGET_LIST_USER}

	pr_ann "RISC-V QEMU"

	pr_inf "Checking out QEMU sources..."
	GIT_CLONE_RECURSIVE=0
	get_git_sources ${QEMU_GITBRANCH}
	if [[ $? != 0 ]]; then
		return $?;
	fi
	GIT_CLONE_RECURSIVE=1

	pr_inf "Configuring qemu sources..."
	cd ${SOURCES_DIR}
	make clean &>> ${LOGFILE}
	make distclean &>> ${LOGFILE}
	./configure --target-list=${TARGET_LIST} --disable-docs \
		    --prefix=${INSTALL_DIR} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tConfig failed, check out ${LOGFILE}..."
		return -1;
	fi

	pr_inf "Building riscv-32/riscv-64 QEMU..."
	make -j${NUM_JOBS} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tBuild failed, check out ${LOGFILE}..."
		return -1;
	fi
	make install &>> ${LOGFILE}

	cd ${SAVED_PWD}
}

###################
# COMMON COMMANDS #
###################

function build_linux () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/rvlinux.log
	local SOURCES_DIR=${SOURCES}/riscv-linux
	local GITURL=${LINUX_KERNEL_GITURL}
	local INSTALL_DIR=${WORKDIR}/${BASE_ISA}/riscv-linux/
	local CONFIG_DIR=${TARGET_PATH}/configs/
	local ROOTFS_INSTALL_DIR=${WORKDIR}/${BASE_ISA}/rootfs/
	local TC_INSTALL_DIR=${BINDIR}/riscv-glibc-toolchain
	local CC_PREFIX=riscv64-unknown-linux-gnu-
	PATH=${TC_INSTALL_DIR}/bin:${PATH}

	if [[ ${KERNEL_EMBED_INITRAMFS} == 1 ]]; then
		pr_ann "RISC-V Linux kernel for ${TARGET}/${BASE_ISA} with built-in initramfs"
	else
		pr_ann "RISC-V Linux kernel for ${TARGET}/${BASE_ISA}"
	fi

	if [[ ! -d ${TC_INSTALL_DIR} ]]; then
		pr_err "Toolchain not present, did you run bootstrap ?"
		return -1;
	fi

	if [[ -d ${INSTALL_DIR} ]]; then
		rm -rf ${INSTALL_DIR}
	fi
	mkdir -p ${INSTALL_DIR} &>> ${LOGFILE}

	pr_inf "Checking out Linux sources..."
	get_git_sources ${LINUX_KERNEL_GITBRANCH}
	if [[ $? != 0 ]]; then
		return $?;
	fi

	cd ${SOURCES_DIR}
	pr_inf "Preparing kernel sources..."
	apply_patches "kernel"

	pr_inf "Configuring kernel sources..."
	make clean &>> ${LOGFILE}
	make distclean &>> ${LOGFILE}

	if [[ -f ${CONFIG_DIR}/linux ]]; then
		pr_dbg "Using provided config file"
		cp ${CONFIG_DIR}/linux ./.config
		ARCH=riscv CROSS_COMPILE=${CC_PREFIX} \
		make olddefconfig &>> ${LOGFILE}
	else
		ARCH=riscv CROSS_COMPILE=${CC_PREFIX} \
		make defconfig &>> ${LOGFILE}
	fi

	if [[ $? != 0 ]]; then
		pr_err "\tConfig failed, check out ${LOGFILE}..."
		return -1;
	fi

	# Switch to 32bit configuration, olddefconfig
	# should handle dependencies apropriately
	if [[ ${BASE_ISA} == "RV32I" ]]; then
		sed -i s#CONFIG_ARCH_RV64I#CONFIG_ARCH_RV32I#g .config
		ARCH=riscv CROSS_COMPILE=${CC_PREFIX} \
		make olddefconfig &>> ${LOGFILE}
	fi

	pr_inf "Building Linux kernel..."
	ARCH=riscv CROSS_COMPILE=${CC_PREFIX} \
	make -j${NUM_JOBS} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tBuild failed, check out ${LOGFILE}..."
		return -1;
	fi

	pr_inf "Copying kernel image and modules..."
	cp vmlinux ${INSTALL_DIR}/
	cp arch/riscv/boot/Image ${INSTALL_DIR}/
	cp arch/riscv/boot/Image.gz ${INSTALL_DIR}/
	INSTALL_MOD_PATH=${INSTALL_DIR} ARCH=riscv \
	make modules_install &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tCopy failed, check out ${LOGFILE}..."
		return -1;
	fi

	if [[ ${KERNEL_EMBED_INITRAMFS} == 1 ]]; then
		pr_inf "Building initramfs..."
		INITRAMFS_SKIP_IMAGE=1
		build_rootfs
		pr_inf "Re-building kernel image..."
		echo "CONFIG_INITRAMFS_SOURCE=\"${ROOTFS_INSTALL_DIR}\"" >> .config
		echo "CONFIG_INITRAMFS_COMPRESSION_XZ=y" >> .config
		echo "CONFIG_INITRAMFS_COMPRESSION=\".xz\"" >> .config
		ARCH=riscv CROSS_COMPILE=${CC_PREFIX} \
		make olddefconfig &>> ${LOGFILE}
		rm vmlinux &>> ${LOGFILE}
		rm arch/riscv/boot/Image &>> ${LOGFILE}
		rm arch/riscv/boot/Image.gz &>> ${LOGFILE}
		fakeroot -i ${TMP_DIR}/frstate -- make \
		ARCH=riscv CROSS_COMPILE=${CC_PREFIX} \
		-j${NUM_JOBS} &>> ${LOGFILE}
		if [[ $? != 0 ]]; then
			pr_err "\tBuild failed, check out ${LOGFILE}..."
			return -1;
		fi
		cp vmlinux ${INSTALL_DIR}/
		cp arch/riscv/boot/Image ${INSTALL_DIR}/
		cp arch/riscv/boot/Image.gz ${INSTALL_DIR}/
		KERNEL_EMBED_INITRAMFS=0
	fi

	cd ${SAVED_PWD}
}

function build_osbi () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/osbi.log
	local SOURCES_DIR=${SOURCES}/riscv-opensbi
	local GITURL=${OSBI_GITURL}
	local BUILD_DIR=${SOURCES_DIR}/build
	local INSTALL_DIR=${WORKDIR}/${BASE_ISA}/riscv-opensbi/
	local LINUX_INSTALL_DIR=${WORKDIR}/${BASE_ISA}/riscv-linux
	local OSBI_PAYLOAD=""
	local BASE_ISA_XLEN=$(echo ${BASE_ISA} | tr -d [:alpha:])
	local TC_INSTALL_DIR=${BINDIR}/riscv-glibc-toolchain
	local CC_PREFIX=riscv64-unknown-linux-gnu-
	local OSBI_MAKE_PARAMS=""

	PATH=${TC_INSTALL_DIR}/bin:${PATH}

	pr_ann "OpenSBI for ${TARGET}/${BASE_ISA}"

	if [[ ! -d ${TC_INSTALL_DIR} ]]; then
		pr_err "Toolchain not present, did you run bootstrap ?"
		return -1;
	fi

	if [[ ${OSBI_PLATFORM} == "" ]]; then
		pr_err "Platform not specified/supported"
		return -2;
	fi

	if [[ ${OSBI_WITH_PAYLOAD} == 1 ]]; then
		if [[ ! -f ${LINUX_INSTALL_DIR}/Image ]]; then
			pr_err "\tLinux kernel not built"
			return -2;
		fi
		OSBI_PAYLOAD=${LINUX_INSTALL_DIR}/Image
		OSBI_MAKE_PARAMS="FW_PAYLOAD=y FW_PAYLOAD_PATH=${OSBI_PAYLOAD}"
		if [[ ${FDT_ADDR} != 0x0 ]]; then
			OSBI_MAKE_PARAMS="${OSBI_MAKE_PARAMS} FW_PAYLOAD_FDT_ADDR=${FDT_ADDR}"
		else
			OSBI_MAKE_PARAMS="${OSBI_MAKE_PARAMS} FW_PAYLOAD_FDT_ADDR="
		fi
	fi

	if [[ ${MEM_START} != 0x0 ]]; then
		OSBI_MAKE_PARAMS="${OSBI_MAKE_PARAMS} FW_TEXT_START=${MEM_START}"
	fi

	pr_inf "Checking out OpenSBI sources..."
	get_git_sources ${OSBI_GITBRANCH}
	if [[ $? != 0 ]]; then
		return $?;
	fi

	cd ${SOURCES_DIR}
	make distclean &>> ${LOGFILE}
	pr_inf "Preparing OpenSBI sources..."
	apply_patches "osbi"

	pr_inf "Building OpenSBI..."
	CROSS_COMPILE=${CC_PREFIX} PLATFORM_RISCV_XLEN=${BASE_ISA_XLEN} \
	make PLATFORM=${OSBI_PLATFORM} ${OSBI_MAKE_PARAMS} \
	-j${NUM_JOBS} &>> ${LOGFILE}
	if [[ $? != 0 ]]; then
		pr_err "\tBuild failed, check out ${LOGFILE}..."
		return -1;
	fi

	if [[ -d ${INSTALL_DIR} ]]; then
		rm -rf ${INSTALL_DIR}
	fi

	mkdir -p ${INSTALL_DIR}

	mv ${BUILD_DIR}/platform/${OSBI_PLATFORM}/firmware/*.elf ${INSTALL_DIR}
	mv ${BUILD_DIR}/platform/${OSBI_PLATFORM}/firmware/*.bin ${INSTALL_DIR}

	cd ${SAVED_PWD}
}

function build_rootfs () {
	local SAVED_PWD=${PWD}
	local LOGFILE=${TMP_DIR}/rootfs.log
	local INSTALL_DIR=${WORKDIR}/${BASE_ISA}/rootfs
	local LINUX_INSTALL_DIR=${WORKDIR}/${BASE_ISA}/riscv-linux/

	# Don't print the title when called by build_linux
	if [[ ${KERNEL_EMBED_INITRAMFS} == 0 ]]; then
		pr_ann "Minimal RootFS for ${TARGET}/${BASE_ISA}"
	fi

	if [[ -d ${INSTALL_DIR} ]]; then
		rm -rf ${INSTALL_DIR}
	fi
	mkdir -p ${INSTALL_DIR}/{dev,proc,sys} &>> ${LOGFILE}
	mkdir -p ${INSTALL_DIR}/{root,etc,var/run,/lib/firmware} &>> ${LOGFILE}

	pr_inf "Installing kernel modules..."
	if [[ ! -f ${LINUX_INSTALL_DIR}/vmlinux ]]; then
		pr_err "Please build kernel first"
		return -1;
	fi

	cp -p -r ${LINUX_INSTALL_DIR}/lib ${INSTALL_DIR}/

	build_busybox

	if [[ ${NO_NETWORK} == 0 ]]; then
		build_dropbear
		build_iperf
	fi

	pr_inf "Adding files and symlinks..."
	cd ${INSTALL_DIR}
	cp -p ${SCRIPT_PATH}/files/init ./sbin/initscript
	cp -p ${SCRIPT_PATH}/files/inittab ./etc/
	cp -p ${SCRIPT_PATH}/files/udhcpc_handler.sh ./etc/
	cp -p ${SCRIPT_PATH}/files/motd ./etc/
	cp -p ${SCRIPT_PATH}/files/extra/* ./bin/ &> /dev/null
	fakeroot -s ${TMP_DIR}/frstate mknod -m 622 dev/console c 5 1
	ln -s ./bin/busybox ./init

	if [[ ${INITRAMFS_SKIP_IMAGE} == 1 ]]; then
		cd ${SAVED_PWD}
		INITRAMFS_SKIP_IMAGE=0
		return 0;
	fi

	pr_inf "Creating initramfs image..."
	fakeroot -i ${TMP_DIR}/frstate /bin/bash -c 'find . -print0 | cpio --null -ov --format=newc' > \
	     ${TMP_DIR}/initramfs.cpio 2>> ${LOGFILE}
	cd ${TMP_DIR}
	xz -e -T0 --check=crc32 --lzma2=dict=32MiB \
	   initramfs.cpio &>> ${LOGFILE}
	rm -rf ${INSTALL_DIR}/*
	mv ${TMP_DIR}/initramfs.cpio.xz ${INSTALL_DIR}/initramfs.img

	cd ${SAVED_PWD}
}

function bootstrap () {
	if [[ ${TARGET} != "" ]]; then
		target_bootstrap
	else
		if build_toolchain newlib &&
		   build_toolchain glibc &&
#		   build_toolchain musl32 &&
		   build_toolchain musl64 &&
		   build_qemu ; then
			return 0;
		else
			return -1;
		fi
	fi
}

function setup_env () {
	local TC_NEWLIB_PATH=${BINDIR}/riscv-newlib-toolchain/bin
	local TC_GLIBC_PATH=${BINDIR}/riscv-glibc-toolchain/bin
	local TC_MUSL32_PATH=${BINDIR}/riscv-musl32-toolchain/bin
	local TC_MUSL64_PATH=${BINDIR}/riscv-musl64-toolchain/bin
	local TC_MUSL_PATHS=${TC_MUSL32_PATH}:${TC_MUSL64_PATH}
	local ALL_TC_PATHS=${TC_NEWLIB_PATH}:${TC_GLIBC_PATH}:${TC_MUSL_PATHS}
	local QEMU_PATH=${BINDIR}/riscv-qemu/bin
	export PATH=${ALL_TC_PATHS}:${QEMU_PATH}:${PATH}
}

function cleanup () {
	pr_inf "Cleaning up..."
	rm -rf ${BINDIR} &> /dev/null
	if [[ ${CLEAR_SOURCES} == 1 ]]; then
		rm -rf ${SOURCES} &> /dev/null
	fi
}

################
# SCRIPT START #
################

# Check if we are being sourced, if so just run setup_env
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
	pr_inf "Setting up RISC-V toolchain paths..."
	setup_env
	return 0
fi

pr_ann "Yet another RISC-V tool v0.5"
env_check $@

mkdir -p ${SOURCES} &> /dev/null
mkdir -p ${WORKDIR} &> /dev/null

# Cleanup previous tmpdirs
rm -rf /tmp/${SCRIPT_NAME}_*
mkdir -p ${TMP_DIR} &> /dev/null

if [[ ${TARGET} !=  "" ]];then
	shift 1
fi

$@

if [[ ${KEEP_LOGS} == 1 ]];then
	pr_inf "Checkout logs at ${TMP_DIR}"
else
	rm -rf ${TMP_DIR} &> /dev/null
fi
